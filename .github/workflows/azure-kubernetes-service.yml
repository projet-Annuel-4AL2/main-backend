# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# The ACR should be attached to the AKS cluster
# For instructions see:
#   - https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
#   - https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
#   - https://learn.microsoft.com/en-us/azure/aks/cluster-container-registry-integration?tabs=azure-cli#configure-acr-integration-for-existing-aks-clusters
#   - https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository (instructions for getting these can be found at https://docs.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-cli%2Clinux):
#    - AZURE_CLIENT_ID
#    - AZURE_TENANT_ID
#    - AZURE_SUBSCRIPTION_ID
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry / ACR)
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#    - CONTAINER_NAME (name of the container image you would like to push up to your ACR)
#    - IMAGE_PULL_SECRET_NAME (name of the ImagePullSecret that will be created to pull your ACR image)
#    - DEPLOYMENT_MANIFEST_PATH (path to the manifest yaml for your deployment)
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please refer to https://github.com/Azure/login

name: Build and deploy an app to AKS

on:
  push:
    branches: ["master"]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: "your-azure-container-registry"
  CONTAINER_NAME: "your-container-name"
  RESOURCE_GROUP: "your-resource-group"
  CLUSTER_NAME: "your-cluster-name"
  DEPLOYMENT_MANIFEST_PATH: "your-deployment-manifest-path"

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4


      - name: Azure Login
        run: az login --service-principal -u "2f2437b9-09e5-46f2-87bb-5bbaad621939" -p "wfV8Q~1yxRtIF_TOb4H8zSGLZHf4Lf9DpQNtVaQA" --tenant "30959897-1d89-41b6-87c2-b6395c3aca1d"

      # Logs in with your Azure credentials
      #- name: Azure login
      #  uses: azure/login@v1.4.6
      #  with:
      #    client-id: 2f2437b9-09e5-46f2-87bb-5bbaad621939
      #    tenant-id: 30959897-1d89-41b6-87c2-b6395c3aca1d
      #    subscription-id: 3fd3f8ea-0fd8-4261-b442-e249de79f43b

      # Builds and pushes an image up to your Azure Container Registry
      - name: Build and push image to ACR
        run: |
          az acr build --image gaveenregistry.azurecr.io/bytebelt:${{ github.sha }} --registry gaveenregistry -g gavin_group ./bytebelt

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v4

      # Logs in with your Azure credentials
      - name: Azure Login
        run: az login --service-principal -u "2f2437b9-09e5-46f2-87bb-5bbaad621939" -p "wfV8Q~1yxRtIF_TOb4H8zSGLZHf4Lf9DpQNtVaQA" --tenant "30959897-1d89-41b6-87c2-b6395c3aca1d"

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: gavin_group
          cluster-name: gavin
          admin: 'true'
          use-kubelogin: 'true'
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      
      - name: Add ingress-nginx Helm repo
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
      
      - name: Uninstall existing ingress-nginx (if any)
        run: |
          helm uninstall ingress-nginx-default --namespace default || true

      - name: Install cert-manager
        run: |
          kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.6.0/cert-manager.yaml

      - name: Install NGINX Ingress Controller
        run: |
          helm install ingress-nginx-default ingress-nginx/ingress-nginx --create-namespace --namespace default

      - name: Apply Ingress and Certificate
        run: |
          kubectl apply -f ./manifests/ingress.yaml
          kubectl apply -f ./manifests/certificate.yaml
      
      - name: Deploy PostgreSQL Service
        uses: Azure/k8s-deploy@v1
        with:
          action: deploy
          manifests: |
            ./manifests/db-service.yaml
            ./manifests/deployment.yaml
          images: |
            gaveenregistry.azurecr.io/bytebelt:${{ github.sha }}

      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: |
            ./manifests/certificate.yaml
            ./manifests/cluster-issuer.yaml
          #images: |
          #  gaveenregistry.azurecr.io/bytebelt:${{ github.sha }}